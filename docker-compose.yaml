version: '3'
networks:
  app-network:
    driver: bridge

services:
  mysql-container:
    networks:
      - app-network
    restart: unless-stopped
    image: mysql:latest
    platform: linux/arm64
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: example_db
    ports:
      - "3306:3306"
    volumes:
      - ./backend/script/init.sql:/docker-entrypoint-initdb.d/init.sql
#    command: /bin/sh -c "echo 'Starting database container...'"

  backend:
    image: springboot-app:${TAG}
    networks:
      - app-network
    restart: unless-stopped
    build:
      context: ./backend
      dockerfile: Dockerfile-backend
    ports:
      - "12345:8080"
    depends_on:
      - mysql-container
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    command:
      - bash
      - -c
      - | # 여러 줄의 명령어를 docker-compose.yaml 내에 실행하기 위한 YAML 구문
        echo 'Waiting database container...'
        ./wait-for-it.sh mysql-container:3306 -s -t 0
        echo 'Starting backend container...'
        java -jar app.jar

  frontend:
    networks:
      - app-network
    restart: unless-stopped
    image: react-vite-app:${TAG}
    build:
      context: ./frontend
      dockerfile: Dockerfile-frontend
    depends_on:
      - backend
    volumes:
      - ./frontend/src:/workspace/app/src
    ports:
      - "4000:80"
    command:
      - /bin/sh
      - -c
      - "echo 'Starting frontend container...' && nginx -g 'daemon off;'"

#  nginx -g 'daemon off;' 명령어는 Nginx 서버를 데몬 모드에서 실행하지 않고 전경(foreground) 모드에서 실행하도록 하는 것을 의미합니다.
#  Nginx는 기본적으로 데몬 모드로 실행됩니다. 데몬 모드에서는 Nginx가 백그라운드에서 실행되며, 시작한 후에 쉘 제어를 사용자에게 반환합니다.
#  하지만 컨테이너와 같은 환경에서는 프로세스가 전경에서 실행되어야 합니다.
#  그 이유는 컨테이너가 시작 프로세스가 종료되면 컨테이너도 종료되기 때문입니다.
#  -g 'daemon off;' 옵션은 Nginx의 전역 구성을 임시로 재정의하는 데 사용되며, 이 경우 데몬 모드를 끄도록 지시합니다.
#  따라서 이 명령어를 사용하면 Nginx는 전경에서 실행되며, 컨테이너는 Nginx 프로세스가 실행되는 동안 계속 실행됩니다.